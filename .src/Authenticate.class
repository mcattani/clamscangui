' Gambas class file

'' ' *********************************************************************************************************
'' ' Ce programme est un logiciel libre; vous pouvez le redistribuer ou le modifier suivant
'' ' les termes de la GNU General Public License telle que publiée par la Free Software Foundation ;
'' ' soit la version 3 de la licence, soit( à votre gré) toute version ultérieure.
'' ' Ce programme est distribué dans l'espoir qu'il sera utile, mais SANS AUCUNE GARANTIE ;
'' ' sans même la garantie tacite de QUALITÉ MARCHANDE ou d'ADÉQUATION à UN BUT PARTICULIER.
'' ' Consultez la GNU General Public License pour plus de détails.
'' ' Vous devez avoir reçu une copie de la GNU General Public License en même temps que ce programme ;
'' ' si ce n 'est pas le cas, consultez <http://www.gnu.org/licenses>.
'' ' *********************************************************************************************************
'' ' To Ceasar : Thanks to Cogier (Charlie Ogier)

Create Static                                                                   'Store Class in memory

siCount As Short                                                                'Counter
sOutput As String                                                               'To return the output of a command
sCommand As String                                                              'Command to run
Static sPassword As String                                                      'Stores the password

Public Sub Command(CommandLine As String) As String                             'Takes the Command and returns the output of the command

     If Not CommandLine Then Return                                             'If there is no Command then get out of here!
     FMain.bFlag = False
     sCommand = CommandLine                                                     'Move the Command to a global variable

     ' If sPassword Then                                                        'If the password has been stored then..
     '      Message("Mot de passe déjà enregistré\n" & FMain.sMot & "\nAction effectuée")
     '      ButtonAuthenticate_Click                                            'Click the 'Authenticate' button
     '      Return sOutput                                                      'Return the Command's output
     ' End If

     LabelHeader.Text = sCommand
     Me.Text = sCommand

     If FMain.bSudo = True Then
          VBox2.Visible = False
          ' HBox1.Visible = False                                               'selon les besoins
     Else
          VBox2.Visible = True
          ' HBox1.Visible = True
     Endif
     CheckCapsLock                                                              'Check if the Caps Lock is on
     If Module1.cloture = True Then
          ' ButtonCancel.Visible = False                                        'selon les besoins
          Me.Title = ("ClamScanGui debe matar el proceso actual, en poder de sudo!")
     Endif
     Me.ShowModal()                                                             'Show the Authentication Form
     Return sOutput                                                             'Return the Command's output

End

Public Sub ButtonAuthenticate_Click()                                           'When the the Authenticate button is clicked..

     Dim sPass As String                                                        'To store the password after the 'Shell$' command
     Dim sChkOutput As String

     Wait                                                                       'Once around the Event Loop
     If Not sPassword Then sPassword = TextBoxPassword.Text                     'If there is no password stored then take it from TextBox
     sPass = Shell$(sPassword)                                                  'The caters for odd characters in the password

     Try Shell "sudo -K;echo " & sPass & "|sudo -S -k whoami 2>&1 " To sChkOutput ' fonctionne pour toutes les langues'2>&1
     TextAreaTerminal.Clear

     If Not InStr(sChkOutput, "root") Then
          sPassword = ""                                                        'Clear sPassword
          TextBoxPassword.text = ""                                             'Clear the TextBox
          TextBoxPassword.SetFocus                                              'Put the cursor in the TexBox
          Timer1.Start                                                          'Start the Timer
          TextAreaTerminal.Text = "Désolé , essayez de nouveau!"
          Wait 2
          TextAreaTerminal.Clear
     Else                                                                       'Else..
          Me.Title = ("POR FAVOR ESPERA. Procesando...")                        'Add message..
          If FMain.bSudo = True Then                                            'si TBSudo enfoncé
               FMain.monTexte = "echo " & sPass & " | sudo -S " & sCommand      'montexte sert pour transférer la commande
               FMain.bFlag = True
               Me.Close
          Else
               Try Shell "echo " & sPass & " | sudo -S " & sCommand Wait For Read As "Terminal"
               '& " 2>&1"
               If Not Error Then
                    FMain.bFlag = True                                          'validation du mot de passe effectuée
                    ButtonCancel.Text = ("atrás")
                    ButtonAuthenticate.Enabled = False
                    Me.Title = ("¡Acción completada!")
               Endif
          Endif
     End If
     sPass = ""

Catch
     TextAreaTerminal.Clear
     TextAreaTerminal.Text &= gb.NewLine & (("¡Se ha producido un error!")) & " ButtonAuthenticate " & Error.Text

End

Public Sub Terminal_read()                                                      'Grabs the text normally output in the Terminal

     Dim sLine As String                                                        'To store the output

     sLine = Read #Last, Lof(Last)
     sOutput &= sLine & gb.NewLine
     TextAreaTerminal.Text &= sLine & gb.NewLine                                'Put the output in the TextArea
     ' TextAreaTerminal.Text = sOutput
     Wait
Catch
     TextAreaTerminal.Clear
     TextAreaTerminal.Text &= gb.NewLine & (("¡Se ha producido un error!")) & " Terminal_read " & Error.Text

End

Public Sub ButtonCancel_Click()                                                 'If the Cancel button is clicked..

     Me.Text = ("Acción cancelada.")
     Me.Close

End

Public Sub Timer1_Timer()                                                       'Timer to 'Shake' the Form when an incorrect password is entered

     Me.Text = ("¡Inténtalo de nuevo!")
     If Even(Me.X) Then Me.x += 9 Else Me.x -= 9                                'If the Form's X value is even then add 9 to it Else subtract 9 from the X value
     Wait                                                                       'Once around the Event Loop
     Inc siCount                                                                'Increase the counter
     If siCount > 75 Then                                                       'If the counter is greater than 75 then..
          Timer1.Stop                                                           'Stop the Timer (and therefore the 'Shaking')
          siCount = 0                                                           'Reset the counter
     End If

End

Public Sub TextBoxPassword_KeyRelease()                                         'To catch the user pressing [Enter] or [Return]

     If Key.Text = "\r" Then ButtonAuthenticate_Click                           'If the user pressed [Enter] or [Return] then Click the 'Authenticate' button
     CheckCapsLock                                                              'Check the Caps Lock

End

Public Sub CheckCapsLock()                                                      'To check the Caps Lock state

     Dim sState As String                                                       'To store the 'Shell' output
     Dim siCap As Short                                                         'To store the 'Value' of Caps Lock state

     Try Shell "xset q | grep 'LED mask'" To sState                             'Shell command. Result is similar to: - 'auto repeat:  on    key click percent:  0    LED mask:  00000003'

     siCap = Right(Bin(Right(Trim(sState), 1)), 1)                              'Get the last binary value, see alternative code below

     If siCap Then                                                              'If siCap is not 0 then..
          LabelCaps.text = ("Bloqueo de mayúsculas está activado")              'Add a message to the Form indicating the Caps Lock is on
     Else                                                                       'siCap must be 0
          LabelCaps.text = ""                                                   'Clear the Caps Lock message
     Endif

End

Public Sub Form_Close()

     If FMain.bFlag = False Then Return                                         'retour si le drapeau est à faux

End
